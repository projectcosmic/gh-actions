name: Drupal CI/CD

on:
  workflow_call:
    inputs:
      assets:
        type: boolean
        description: Whether to build assets
        default: true
        required: false
      assets_lint:
        type: string
        description: Command to lint assets before building
        default: npm run lint
        required: false
      composer_cache_key_prefix:
        type: string
        description: Cache key prefix for composer install
        default: v1
        required: false
      deploy_branch:
        type: string
        description: Name of the branch where deployments should happen or empty string to disable deployments
        default: main
        required: false
      phpunit:
        type: string
        description: Stringified array of */custom directories to run PHPUnit tests on or empty string to disable
        default: '["themes", "modules"]'
        required: false
      php_version:
        type: number
        description: Major (and optional minor) version number of PHP to use
        default: 7.4
        required: false

permissions:
  contents: read

jobs:
  php_codesniffer:
    name: PHP Coding Standards
    runs-on: ubuntu-18.04
    # Skip code style check with [skip tests] in latest commit message and also
    # for bot actions.
    if: '!endsWith(github.actor, ''[bot]'') && !contains(github.event.head_commit.message, ''[skip tests]'')'
    steps:
      - uses: actions/checkout@v2
      - uses: projectcosmic/gh-actions/.github/actions/setup-composer-install@2.x
        with:
          cache_key_prefix: ${{ inputs.composer_cache_key_prefix }}
          php_version: ${{ inputs.php_version }}
      - run: ./vendor/bin/phpcs --runtime-set ignore_warnings_on_exit 1 --report-full
  phpunit:
    name: PHPUnit Tests
    runs-on: ubuntu-18.04
    # Run job on human-initiated event or dependabot composer pull requests and
    # where the latest commit has not indicated to skip tests.
    if: |
      inputs.phpunit != ''
      && (!endsWith(github.actor, '[bot]') || startsWith(github.head_ref, 'dependabot/composer/'))
      && !contains(github.event.head_commit.message, '[skip tests]')
    strategy:
      fail-fast: false
      matrix:
        type: ${{ fromJson(inputs.phpunit) }}
    env:
      SIMPLETEST_DB: mysql://root:root@127.0.0.1/tests
      SIMPLETEST_BASE_URL: http://localhost:8888
      BROWSERTEST_OUTPUT_DIRECTORY: simpletest/browser_output
    steps:
      - uses: actions/checkout@v2
      - uses: projectcosmic/gh-actions/.github/actions/setup-composer-install@2.x
        with:
          cache_key_prefix: ${{ inputs.composer_cache_key_prefix }}
          php_version: ${{ inputs.php_version }}
      - name: Set up
        run: |
          sudo systemctl start mysql.service
          mysql -u root -proot -e 'create database tests'
          composer drupal:scaffold --quiet
          cd public_html
          cp core/assets/scaffold/files/ht.router.php .ht.router.php
          php -S localhost:8888 .ht.router.php >& /dev/null &
          mkdir -p sites/simpletest/browser_output
          if test -f "../allowed_test_deprecations-${{ matrix.type }}.json"
            then echo 'SYMFONY_DEPRECATIONS_HELPER=baselineFile=../allowed_test_deprecations-${{ matrix.type }}.json' >> $GITHUB_ENV
          fi
      - run: ../vendor/bin/phpunit -c core ${{ matrix.type }}/custom
        working-directory: public_html
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ matrix.type }}-test-browser-output
          path: public_html/sites/simpletest/browser_output
  config_update:
    name: Update Configuration
    runs-on: ubuntu-18.04
    if: github.event.pull_request.user.login == 'dependabot[bot]' && startsWith(github.head_ref, 'dependabot/composer/')
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.base.sha }}
      - uses: projectcosmic/gh-actions/.github/actions/setup-composer-install@2.x
        with:
          cache_key_prefix: ${{ inputs.composer_cache_key_prefix }}
          php_version: ${{ inputs.php_version }}
      - name: Get base commit information
        id: base
        run: |
          mv composer.lock composer.lock.base
          echo "::set-output name=hash::${{ hashFiles('public_html/**/*.install', 'public_html/**/*.post_update.php') }}"
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
          clean: false
      - run: composer install --no-progress --no-dev
      - name: Run updates
        run: |
          cp public_html/sites/default/default.settings.php public_html/sites/default/settings.php
          echo '$settings["config_sync_directory"] = "../config/sync";' >> public_html/sites/default/settings.php
          sudo systemctl start mysql.service
          mysql -u root -proot -e 'create database db'
          mv composer.lock composer.lock.pr
          mv composer.lock.base composer.lock
          composer install --no-progress --no-dev
          ./vendor/bin/drush site:install \
            $(sed --regexp-extended --null-data 's/.*(^|\n)profile:\s*['\''"]?(\w+).*/\2/' config/sync/core.extension.yml) \
            --db-url=mysql://root:root@127.0.0.1/db \
            --existing-config
          sudo chmod u+w public_html/sites/default --recursive
          mv composer.lock.pr composer.lock
          composer install --no-progress --no-dev
          ./vendor/bin/drush updatedb
          git config user.name github-actions
          git config user.email github-actions@github.com
          ./vendor/bin/drush config:export --commit --message='Update config'
          git push
        if: hashFiles('public_html/**/*.install', 'public_html/**/*.post_update.php') != steps.base.outputs.hash
  assets:
    name: Build Assets
    runs-on: ubuntu-18.04
    # Run job on human-initiated events or dependabot npm pull requests.
    if: |
      inputs.assets
      && (!endsWith(github.actor, '[bot]') || startsWith(github.head_ref, 'dependabot/npm_and_yarn/'))
      && !contains(github.event.head_commit.message, '[skip assets]')
    steps:
      - uses: actions/checkout@v2
      - name: Set up
        id: setup
        run: |
          theme_path="public_html/themes/custom/${{ github.event.repository.name }}"
          echo "::set-output name=theme_path::$theme_path"
          echo "::set-output name=drupal_version::$(jq '.packages[] | select(.name == "drupal/core").version' composer.lock --raw-output)"
          echo "::set-output name=node_version::$(jq '.volta.node' $theme_path/package.json --raw-output)"
      - name: Core prettier config cache
        id: prettierrc
        uses: actions/cache@v2
        with:
          path: public_html/core/.prettierrc.json
          key: v1-core-version-${{ steps.setup.outputs.drupal_version }}
      - name: Download core prettier config
        if: steps.prettierrc.outputs.cache-hit != 'true'
        run: |
          mkdir --parents public_html/core
          curl https://raw.githubusercontent.com/drupal/drupal/${{ steps.setup.outputs.drupal_version }}/core/.prettierrc.json --output public_html/core/.prettierrc.json
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.setup.outputs.node_version }}
          cache: npm
          cache-dependency-path: ${{ steps.setup.outputs.theme_path }}/package-lock.json
      - name: Run build
        run: |
          npm install
          if test "${{ inputs.assets_lint }}"
            then ${{ inputs.assets_lint }}
          fi
          npm run build
        working-directory: ${{ steps.setup.outputs.theme_path }}
      - uses: actions/upload-artifact@v2
        if: github.ref == format('refs/heads/{0}', inputs.deploy_branch)
        with:
          name: assets
          path: ${{ steps.setup.outputs.theme_path }}/dist
  deploy:
    name: Deploy
    runs-on: self-hosted
    needs:
      - php_codesniffer
      - phpunit
      - assets
    # Run job only on main branch, allowing skipped jobs but no failures or
    # cancellations.
    if: |
      github.ref == format('refs/heads/{0}', inputs.deploy_branch)
      && !cancelled()
      && needs.php_codesniffer.result != 'failure'
      && needs.phpunit.result != 'failure'
      && needs.assets.result != 'failure'
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Composer cache
        uses: actions/cache@v2
        with:
          path: |
            vendor
            public_html/core
            public_html/libraries
            public_html/*/contrib
          key: ${{ inputs.composer_cache_key_prefix }}-composer-${{ hashFiles('composer.lock') }}
          restore-keys: ${{ inputs.composer_cache_key_prefix }}-composer-
      - run: composer install --no-progress --no-dev
      - name: Uninstall removed Drupal extensions
        # @todo support multisite installs.
        run: |
          extensions=`sed --unbuffered --regexp-extended 's/[[:space:]]*(.+):.+/\1/' <(comm -13 <(sed -e '/^theme:$/Q' -Ee 's/(\w+):.*/\1/' config/sync/core.extension.yml | sort) <(./vendor/bin/drush @live config:get core.extension | sed -e '/^theme:$/Q' -Ee 's/(\w+):.*/\1/' | sort))`
          if [[ $extensions ]]
            then ./vendor/bin/drush @live pm:uninstall $extensions
          fi
      - uses: actions/download-artifact@v2
        if: needs.assets.result == 'success'
        with:
          name: assets
          path: dist
      - name: Deploy built assets
        if: needs.assets.result == 'success'
        run: |
          ./vendor/bin/drush rsync dist/ @live:themes/custom/${{ github.event.repository.name }}/dist/ \
            -- \
            --checksum \
            --chmod="Fgo-wx,Dgo-w" \
            --compress \
            --delete \
            --prune-empty-dirs \
            --recursive
      - name: Deploy checked-in code
        # @todo support multisite installs.
        run: |
          git push `./vendor/bin/drush site:alias --format=json | jq 'to_entries[0].value | .user + "@" + .host + ":" + .root | sub("/public_html/?$"; "/site.git")' --raw-output` ${{ inputs.deploy_branch }} --force
          ./vendor/bin/drush @live deploy
